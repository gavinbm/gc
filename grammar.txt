<program>    ::= <stmnt>
<stmnt>      ::= "set" <id> "=" <expr> <nl>
               | "if" <paren_expr> "{" <stmnt> "}" 
               | "if" <paren_expr> "{" <stmnt> "}" "else" "{" <stmnt> "{"
               | "do" "{" <stmnt> "}" "until" <paren_expr>
               | "def" <id> "(" <argv> ")" "{" <stmnt> "}"
               | <nl>
<paren_expr> ::= "(" <expr> ")"
<argv>       ::= list of comma separated identifiers
<expr>       ::= <test> | <id> "=" <expr>
<test>       ::= <sum> | <sum> "<" <sum>
<sum>        ::= <term> | <sum> "+" <term> | <sum> "-" <term>
<term>       ::= <id> | <int> | <paren_expr>
<id>         ::= "a" | "b" | "c" | "d" | ... | "z"
<int>        ::= <an_unsigned_decimal_integer>
<nl>         ::= newline

--------------------------------------------------------
 --- Examples of doing basic things in the language ---
--------------------------------------------------------
variables: we're using the set keyword
    set x = y

functions: we're using def like this
    def myfunc(argv) {
        code...
    }

conditionals: basic if else structure
    if (condition) then {
        code a...
    } else {
        code b...
    }

call funcs: standard, nothing changes
    myfunc(argv)

iteration: we're using do loops of the following syntax:
    do {
        code...
    } until (COND)
